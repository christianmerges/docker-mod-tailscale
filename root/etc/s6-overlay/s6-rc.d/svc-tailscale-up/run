#!/usr/bin/with-contenv bash

FLAGS=""

# configure `tailscale up`
if ! [ -v TAILSCALE_AUTHKEY ]; then
    echo '[!] TAILSCALE_AUTHKEY is not defined, this will print a login URL to the screen'
else
    FLAGS="${FLAGS} --authkey=${TAILSCALE_AUTHKEY}"
fi

if [ -v TAILSCALE_HOSTNAME ]; then
    FLAGS="${FLAGS} --hostname=${TAILSCALE_HOSTNAME}"
fi

if [ -v TAILSCALE_USE_SSH ]; then
    FLAGS="${FLAGS} --ssh=${TAILSCALE_USE_SSH}"
fi

if [ -v TAILSCALE_BE_EXIT_NODE ]; then
    echo '[!] acting as an exit node, you may need to approve this in the admin console'
    FLAGS="${FLAGS} --advertise-exit-node=${TS_BE_EXIT_NODE}"
fi
# configure exit node to fix
if [ -v TAILSCALE_USE_EXIT_NODE ]; then
    echo "[!] using ${TAILSCALE_USE_EXIT_NODE} as an exit node."
    FLAGS="${FLAGS} --exit-node=${TAILSCALE_USE_EXIT_NODE}"

    if [ -v TAILSCALE_EXIT_NODE_ALLOW_LAN_ACCESS ]; then
        echo '[!] allowing exit node LAN access.'
        FLAGS="${FLAGS} --exit-node-allow-lan-access=${TAILSCALE_EXIT_NODE_ALLOW_LAN_ACCESS}"
    fi
fi
echo FLAGS: $FLAGS
tailscale up $FLAGS

# configure serve
if [ -v TAILSCALE_SERVE_PORT ] && [ -v TAILSCALE_SERVE_MODE ]; then
    if [[ $TAILSCALE_SERVE_MODE == "https" ]]; then
        tailscale serve "${TAILSCALE_SERVE_MODE}":443 / http://localhost:"${TAILSCALE_SERVE_PORT}"
    else
        tailscale serve "${TAILSCALE_SERVE_MODE}":443 http://localhost:"${TAILSCALE_SERVE_PORT}"
    fi
fi

# configure funnel
if [ -v TAILSCALE_FUNNEL ]; then
    tailscale funnel 443 on
fi

# route all traffic through wireguard container (tailscale exit node replacement)
if [ -v WG_CONTAINER_NAME ]; then
    WIREGUARD_CONTAINER_IP=$(nslookup "${WG_CONTAINER_NAME}" | grep -oE 'Address: [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | awk '{print $2}')
    echo "[!] routing all traffic through ${WIREGUARD_CONTAINER_IP}"
    ip route del default
    ip route add default via "${WIREGUARD_CONTAINER_IP}"
fi

# configure proxy
sleep 3 # give tailscale a chance to start up
if [ -v TAILSCALE_USE_EXIT_NODE ]; then
    # test proxy
    export ALL_PROXY=socks5://localhost:1055/
    export HTTP_PROXY=http://localhost:1055/
    export http_proxy=http://localhost:1055/
    TEST_IP=$(curl -s https://api.ipify.org)
    # add proxy to environment if /etc/environment exixts
    if [ -f /etc/environment ]; then
        echo ALL_PROXY=socks5://localhost:1055/ >> /etc/environment
        echo HTTP_PROXY=http://localhost:1055/ >> /etc/environment
        echo http_proxy=http://localhost:1055/ >> /etc/environment
    fi
    # add proxy to bash.bashrc if it exists
    if [ -f /etc/bash.bashrc ]; then
        echo export ALL_PROXY=socks5://localhost:1055/ >> /etc/bash.bashrc
        echo export HTTP_PROXY=http://localhost:1055/ >> /etc/bash.bashrc
        echo export http_proxy=http://localhost:1055/ >> /etc/bash.bashrc
    fi
    # add proxy to profile if it exists
    if [ -f /etc/profile ]; then
        echo export ALL_PROXY=socks5://localhost:1055/ >> /etc/profile
        echo export HTTP_PROXY=http://localhost:1055/ >> /etc/profile
        echo export http_proxy=http://localhost:1055/ >> /etc/profile
    fi
    # add in /var/run/s6/container_environment folder if it exists
    if [ -d /var/run/s6/container_environment ]; then
        printf "socks5://localhost:1055/" > /var/run/s6/container_environment/ALL_PROXY
        printf "http://localhost:1055/" > /var/run/s6/container_environment/HTTP_PROXY
        printf "http://localhost:1055/" > /var/run/s6/container_environment/http_proxy
    fi


fi



